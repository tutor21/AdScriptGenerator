// public/ads-loader.js
// This script is served as a static file from your web server.
// Its content should be copied from the alert message generated by the dashboard.

(function() {
  let currentScript = null;
  const scripts = document.querySelectorAll('script[id^="adsense-sim-script-"]');
  for (let i = 0; i < scripts.length; i++) {
    const scriptSrc = scripts[i].getAttribute('src');
    if (scriptSrc && scriptSrc.endsWith('/ads-loader.js')) {
      currentScript = scripts[i];
      break;
    }
  }

  if (!currentScript) {
    console.error("AdSense Simulator: Loader script tag not found for dynamic loading.");
    return;
  }

  // These values will be replaced by the dashboard's script generation logic
  // when you copy the content into this file.
  const embedLicense = "SCRIPT_ID_PLACEHOLDER"; // Will be replaced with actual license ID
  const embedSite = "TARGET_DOMAIN_PLACEHOLDER"; // Will be replaced with actual target domain
  const adContainerId = "ad-container-" + embedLicense;

  let container = document.getElementById(adContainerId);
  if (!container) {
    console.error("AdSense Simulator: Ad container div not found with ID:", adContainerId);
    container = document.createElement('div');
    container.id = adContainerId;
    container.className = "w-full flex justify-center items-center p-4 min-h-[200px]";
    document.body.appendChild(container);
  }

  const loadScript = (url, type, onloadCallback) => {
    let script = document.querySelector(`script[src="${url}"]`);
    if (!script) {
      script = document.createElement('script');
      script.src = url;
      script.type = type;
      if (onloadCallback) {
        script.onload = () => {
          script.dataset.loaded = 'true';
          onloadCallback();
        };
      }
      document.head.appendChild(script);
    } else if (onloadCallback) {
      if (script.dataset.loaded === 'true') {
        onloadCallback();
      } else {
        script.onload = () => {
          script.dataset.loaded = 'true';
          onloadCallback();
        };
      }
    }
  };

  const AdDisplay = ({ config }) => {
    const [ads, setAds] = React.useState([]);

    React.useEffect(() => {
      const mockProducts = [
        { id: 1, name: "Ergonomic Office Chair", price: "$299.99", imageUrl: "https://placehold.co/100x100/007bff/ffffff?text=Chair" },
        { id: 2, name: "Smart Home Speaker", price: "$89.99", imageUrl: "https://placehold.co/100x100/28a745/ffffff?text=Speaker" },
        { id: 3, name: "Noise Cancelling Headphones", price: "$149.99", imageUrl: "https://placehold.co/100x100/ffc107/000000?text=Headphones" },
        { id: 4, name: "Wireless Mechanical Keyboard", price: "$119.99", imageUrl: "https://placehold.co/100x100/dc3545/ffffff?text=Keyboard" },
      ];
      setAds(mockProducts.sort(() => 0.5 - Math.random()).slice(0, 3));
    }, []);

    if (!config) {
      return React.createElement("div", { className: "text-gray-600" }, "AdSense simulator: Configuration error.");
    }

    return React.createElement(
      "div",
      { className: "font-sans w-full max-w-4xl mx-auto p-4 bg-white shadow-lg rounded-xl" },
      React.createElement(
        "h3",
        { className: "text-xl font-bold text-gray-800 mb-4 text-center" },
        React.createElement("span", { className: "inline-block px-3 py-1 bg-blue-100 text-blue-800 rounded-full text-sm mr-2" }, "Ad"),
        "Related Products"
      ),
      React.createElement(
        "div",
        { className: "grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4" },
        ads.map(ad =>
          React.createElement(
            "div",
            { key: ad.id, className: "bg-gray-50 p-3 rounded-lg shadow-sm flex flex-col items-center text-center transition duration-300 ease-in-out transform hover:scale-105" },
            React.createElement("img", { src: ad.imageUrl, alt: ad.name, className: "w-24 h-24 object-contain rounded-md mb-2 border border-gray-200 p-1" }),
            React.createElement("p", { className: "text-gray-800 font-semibold text-lg" }, ad.name),
            React.createElement("p", { className: "text-blue-600 text-xl font-bold mt-1" }, ad.price),
            React.createElement("button", { className: "mt-3 px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50 transition duration-150 ease-in-out shadow-md" }, "Shop Now")
          )
        )
      ),
      React.createElement(
        "p",
        { className: "text-xs text-gray-400 text-center mt-4" },
        "Disclaimer: This is a simulated ad display for demonstration purposes only and does not represent actual Google AdSense or Google Shop integration. Real integration requires proper API setup and adherence to Google's policies."
      )
    );
  };

  const initializeAndRender = async () => {
    try {
      const firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : {};
      const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';

      if (!firebaseConfig.apiKey) {
         console.error("AdSense Simulator: Firebase config is missing. Cannot initialize Firebase.");
         container.innerHTML = '<div class="text-center text-gray-500">AdSense simulator: Missing Firebase config.</div>';
         return;
      }

      const { initializeApp } = await import('https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js');
      const { getFirestore, doc, getDoc } = await import('https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js');
      const { createRoot } = await import('https://unpkg.com/react-dom/client');
      const React = await import('https://unpkg.com/react');

      const app = initializeApp(firebaseConfig);
      const db = getFirestore(app);

      const configDocRef = doc(db, `artifacts/${appId}/public/data/scripts/${embedLicense}`);
      const configSnap = await getDoc(configDocRef);

      if (configSnap.exists()) {
        const config = configSnap.data();
        const currentOrigin = window.location.origin.replace(/\/+$/, '');
        const targetOrigin = config.targetDomain.replace(/\/+$/, '');

        const expiry = new Date(config.expiryDate);
        const now = new Date();

        if (currentOrigin === targetOrigin && now < expiry) {
          const root = createRoot(document.getElementById(adContainerId));
          root.render(React.createElement(AdDisplay, { config }));
        } else {
          console.warn("AdSense simulator: Script conditions not met.");
          console.warn("Domain match:", currentOrigin === targetOrigin, "Current:", currentOrigin, "Target:", targetOrigin);
          console.warn("Expiry check:", now < expiry, "Now:", now.toISOString(), "Expiry:", expiry.toISOString());
          document.getElementById(adContainerId).innerHTML = '<div class="text-center text-gray-500">AdSense simulator: Script conditions not met (domain mismatch or expired).</div>';
        }
      } else {
        console.error("AdSense simulator: Configuration not found for license:", embedLicense);
        document.getElementById(adContainerId).innerHTML = '<div class="text-center text-gray-500">AdSense simulator: Configuration not found.</div>';
      }
    } catch (e) {
      console.error("AdSense simulator: Error loading configuration:", e);
      document.getElementById(adContainerId).innerHTML = '<div class="text-center text-gray-500">AdSense simulator: Error loading ads.</div>';
    }
  };

  loadScript("https://cdn.tailwindcss.com", "text/javascript", () => {
    const tailwindScript = document.querySelector('script[src="https://cdn.tailwindcss.com"]');
    if (tailwindScript) tailwindScript.dataset.loaded = 'true';

    initializeAndRender();
  });
})();
